"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metaRoles = void 0;
exports.metaRoles = {
    chTYPE: {
        DIMMER: 'light.dimmer',
        BLIND: 'blind',
        SWITCH: 'switch',
        KEY: 'button',
        SHUTTER_CONTACT: 'sensor',
    },
    dpCONTROL: {
        'DIMMER.LEVEL': 'level.dimmer',
        'BLIND.LEVEL': 'level.blind',
        'SHUTTER_TRANSMITTER.LEVEL': 'level.blind',
        'LOCK.STATE': 'switch.lock',
        'DOOR_SENSOR.STATE': 'value.window',
        'DANGER.STATE': 'sensor.alarm.fire',
    },
    chTYPE_dpNAME: {
        'DIMMER.LEVEL': 'level.dimmer',
        'DIMMER.OLD_LEVEL': 'value.dimmer',
        'DIMMER.LEVEL_REAL': 'value.dimmer',
        'VIRTUAL_DIMMER.LEVEL': 'level.dimmer',
        'VIRTUAL_DIMMER.OLD_LEVEL': 'value.dimmer',
        'VIRTUAL_DIMMER.LEVEL_REAL': 'value.dimmer',
    },
    dpNAME: {
        BATTERY_STATE: 'value.voltage',
        BOOST_STATE: 'level.boost',
        BOOST_MODE: 'switch.mode.boost',
        PARTY_MODE: 'switch.mode.party',
        FROST_PROTECTION: 'indicator',
        CONTROL_MODE: 'indicator',
        FAULT_REPORTING: 'indicator',
        MANU_MODE: 'level.temperature',
        ACTUAL_TEMPERATURE: 'value.temperature',
        ACTUAL_TEMPERATURE_STATUS: 'value',
        TEMPERATURE: 'value.temperature',
        SETPOINT: 'level.temperature',
        SET_TEMPERATURE: 'level.temperature',
        SET_POINT_TEMPERATURE: 'level.temperature',
        SET_POINT_MODE: 'level.mode.thermostat',
        HUMIDITY: 'value.humidity',
        STATE: 'state',
        PRESS_SHORT: 'button',
        PRESS_LONG: 'button.long',
        PRESS_LONG_RELEASE: 'button.release',
        PRESS_CONT: 'button.continuous',
        LEVEL: 'level',
        LOWBAT: 'indicator.lowbat',
        LOW_BAT: 'indicator.lowbat',
        INSTALL_TEST: 'indicator',
        UNREACH: 'indicator.unreach',
        WINDOW_STATE: 'value.window',
        WORKING: 'indicator.working',
        DIRECTION: 'indicator.direction',
        CONFIG_PENDING: 'indicator',
        UPDATE_PENDING: 'indicator',
        INSTALL_MODE: 'indicator',
        RSSI_PEER: 'value.rssi',
        RSSI_DEVICE: 'value.rssi',
        AES_KEY: 'value',
        STICKY_UNREACH: 'indicator.unreach',
        ERROR: 'indicator.error',
        ERROR_OVERHEAT: 'indicator.error.overheat',
        ERROR_OVERLOAD: 'indicator.error.overload',
        ERROR_REDUCED: 'indicator.error',
        MOTION: 'sensor.motion',
        PRESENCE_DETECTION_STATE: 'sensor.motion',
        INHIBIT: 'state.inhibit',
        VALVE_STATE: 'value.valve',
        BRIGHTNESS: 'value.brightness',
        ILLUMINATION: 'value.brightness',
        RAMP_TIME: 'timer.ramp',
        RAMP_STOP: 'button.stop',
        STOP: 'button.stop',
        ON_TIME: 'timer.off',
        DUTYCYCLE: 'value',
        DUTY_CYCLE: 'value',
        COLOR: 'level.color.hue',
        OPERATING_VOLTAGE: 'value.voltage',
        OPERATING_VOLTAGE_STATUS: 'value',
        SABOTAGE: 'indicator',
        CURRENT: 'value.current',
        ENERGY_COUNTER: 'value.power.consumption',
        FREQUENCY: 'value.frequency',
        POWER: 'value.power',
        VOLTAGE: 'value.voltage',
        ERROR_CODE: 'value',
    },
    dvTYPE: {
        'HM-Sec-SD': 'sensor.alarm.fire',
        'HM-Sec-SD-2': 'sensor.alarm.fire',
        'HM-Sec-SD-Team': 'sensor.alarm.fire',
        'HM-Sen-MDIR-O-2': 'sensor.motion',
        'HM-Sen-MDIR-O-3': 'sensor.motion',
        'HM-Sec-MDIR-3': 'sensor.motion',
        'HmIP-SMO': 'sensor.motion',
        'HmIP-SMO-A': 'sensor.motion',
        'HmIP-SPI': 'sensor.motion',
        'HmIP-SMI': 'sensor.motion',
        'HM-Sen-RD-O': 'sensor.rain',
        'HM-Sec-RHS': 'value.tilt',
        'HmIP-SRH': 'value.tilt',
        'HM-Sec-WDS-2': 'sensor.alarm.flood',
        'HmIP-SWD': 'sensor.alarm.flood',
        'HmIP-SWSD': 'sensor.alarm.fire',
    },
};
//# sourceMappingURL=roles.js.map